const { useState, useEffect, useRef, useMemo } = React;

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function App() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
  const [minutes, setMinutes] = useState(25);
  const [seconds, setSeconds] = useState(0);
  const [totalMinutes, setTotalMinutes] = useState(25);
  const [isRunning, setIsRunning] = useState(false);
  const [sessionCount, setSessionCount] = useState(0);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ
  const [ambientSound, setAmbientSound] = useState('none');
  const [volume, setVolume] = useState(0.3);
  const audioRef = useRef(null);
  // const chimeRef = useRef(null); // not used
  
  // –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const safetyTips = useMemo(() => [
    "ü¶∫ –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –°–ò–ó –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã ‚Äî —ç—Ç–æ –≤–∞—à–∞ –ø–µ—Ä–≤–∞—è –ª–∏–Ω–∏—è –∑–∞—â–∏—Ç—ã",
    "‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–æ —Ç—Ä—ë—Ö —Ç–æ—á–µ–∫ –æ–ø–æ—Ä—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –Ω–∞ –≤—ã—Å–æ—Ç–µ —Å–ø–∞—Å–∞–µ—Ç –∂–∏–∑–Ω–∏",
    "üîí LOTO –ø—Ä–æ—Ü–µ–¥—É—Ä—ã: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ ‚Äî –≤–∞—à–∞ –≥–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "üëÄ –î–µ—Ä–∂–∏—Ç–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –≤ —á–∏—Å—Ç–æ—Ç–µ ‚Äî 5S —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫–∏ –Ω–∞ 40%",
    "üö® –ó–Ω–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç—ã —ç–≤–∞–∫—É–∞—Ü–∏–∏ ‚Äî –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Å—á—ë—Ç –∏–¥—ë—Ç –Ω–∞ —Å–µ–∫—É–Ω–¥—ã",
    "üßØ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª–µ–π ‚Äî –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏",
    "üìã JSA –ø–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π ‚Äî 5 –º–∏–Ω—É—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç —á–∞—Å—ã –ø—Ä–æ—Å—Ç–æ—è",
    "ü¶æ –≠—Ä–≥–æ–Ω–æ–º–∏–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ ‚Äî –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
    "‚ö° –≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–∑–æ–ª—è—Ü–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π",
    "üå°Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –º–∏–∫—Ä–æ–∫–ª–∏–º–∞—Ç ‚Äî —Ç–µ–ø–ª–æ–≤–æ–π —Å—Ç—Ä–µ—Å—Å —Å–Ω–∏–∂–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ 30%",
    "üîä –ó–∞—â–∏—Ç–∞ —Å–ª—É—Ö–∞: —Å–Ω–∏–∂–µ–Ω–∏–µ —à—É–º–∞ –Ω–∞ 3 –¥–ë = —É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –≤–¥–≤–æ–µ",
    "üß™ –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ö–∏–º–∏–∫–∞—Ç–∞–º–∏ –≤—Å–µ–≥–¥–∞ –∏–º–µ–π—Ç–µ –ø–æ–¥ —Ä—É–∫–æ–π –ø–∞—Å–ø–æ—Ä—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "üöß –û–≥—Ä–∞–∂–¥–∞–π—Ç–µ –æ–ø–∞—Å–Ω—ã–µ –∑–æ–Ω—ã ‚Äî –≤–∏–¥–∏–º—ã–µ –±–∞—Ä—å–µ—Ä—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã",
    "üì± –û—Ç–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω ‚Äî –ø—Ä–∏—á–∏–Ω–∞ 25% –Ω–µ—Å—á–∞—Å—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤",
    "ü§ù –†–∞–±–æ—Ç–∞ –≤ –ø–∞—Ä–µ –ø—Ä–∏ –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö ‚Äî –≤–∑–∞–∏–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–ø–∞—Å–∞–µ—Ç",
    "üí® –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è –∑–∞–º–∫–Ω—É—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º",
    "üèóÔ∏è –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ª–µ—Å–æ–≤ –∏ –ø–æ–¥–º–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º",
    "üöõ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –æ—Ç –¥–≤–∏–∂—É—â–µ–π—Å—è —Ç–µ—Ö–Ω–∏–∫–∏ ‚Äî –º–∏–Ω–∏–º—É–º 3 –º–µ—Ç—Ä–∞",
    "üîß –ò—Å–ø—Ä–∞–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ‚Äî –∑–∞–ª–æ–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã",
    "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ near-miss —Å–ª—É—á–∞–∏ ‚Äî —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
  ], []);
  
  const [currentTip, setCurrentTip] = useState(() => 
    safetyTips[Math.floor(Math.random() * safetyTips.length)]
  );
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const [todayMinutes, setTodayMinutes] = useState(0);
  const [streak, setStreak] = useState(0);
  const [completedTasks, setCompletedTasks] = useState(0);
  
  // –≠—Ñ—Ñ–µ–∫—Ç —Ç–∞–π–º–µ—Ä–∞
  useEffect(() => {
    let interval = null;
    
    if (isRunning) {
      interval = setInterval(() => {
        setSeconds(prevSeconds => {
          if (prevSeconds === 0) {
            if (minutes === 0) {
              // –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω
              setIsRunning(false);
              playChime();
              setSessionCount(prev => prev + 1);
              setTodayMinutes(prev => prev + totalMinutes);
              setStreak(prev => prev + 1);
              showNotification();
              // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
              setMinutes(totalMinutes);
              setSeconds(0);
              // –ù–æ–≤—ã–π —Å–æ–≤–µ—Ç
              setCurrentTip(safetyTips[Math.floor(Math.random() * safetyTips.length)]);
              return 0;
            }
            setMinutes(prevMinutes => prevMinutes - 1);
            return 59;
          }
          return prevSeconds - 1;
        });
      }, 1000);
    } else if (!isRunning && interval) {
      clearInterval(interval);
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isRunning, minutes, totalMinutes, safetyTips]);
  
  // –°–º–µ–Ω–∞ —Å–æ–≤–µ—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
  useEffect(() => {
    if (!isRunning) return;
    
    const tipInterval = setInterval(() => {
      setCurrentTip(safetyTips[Math.floor(Math.random() * safetyTips.length)]);
    }, 30000);
    
    return () => clearInterval(tipInterval);
  }, [isRunning, safetyTips]);
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã–º –∑–≤—É–∫–æ–º
  useEffect(() => {
    if (audioRef.current) {
      if (ambientSound !== 'none') {
        audioRef.current.play().catch(e => console.log('Audio play failed:', e));
      } else {
        audioRef.current.pause();
      }
      audioRef.current.volume = volume;
    }
  }, [ambientSound, volume]);

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ –∑–≤—É–∫–∞
  useEffect(() => {
    if (audioRef.current) {
      try { audioRef.current.load(); } catch (_) {}
    }
  }, [ambientSound]);
  
  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const handleStart = () => {
    setIsRunning(!isRunning);
  };
  
  const handleReset = () => {
    setIsRunning(false);
    setMinutes(totalMinutes);
    setSeconds(0);
  };
  
  const handlePreset = (presetMinutes) => {
    setTotalMinutes(presetMinutes);
    setMinutes(presetMinutes);
    setSeconds(0);
    setIsRunning(false);
  };
  
  const handleDialChange = (newMinutes) => {
    if (!isRunning) {
      setTotalMinutes(newMinutes);
      setMinutes(newMinutes);
      setSeconds(0);
    }
  };
  
  /*
  const playChime = () => {
    const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIG2m98OScTgwOUarm7blmFgU7k9n1unEiBC13yO/eizEIHWq+8+OWT" +
      "AkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAkOUqzn77ViFgU7k9n1unEiBC13yO/eizEIHWq+8+OWTAk=');
    audio.volume = 0.3;
    audio.play().catch(e => console.log('Chime play failed:', e));
  };
  */
  // –ó–≤—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
  const playChime = () => {
    try {
      const audio = new Audio('End_timer.mp3');
      audio.volume = 0.5;
      audio.play().catch(e => console.log('End timer sound failed:', e));
    } catch (e) {
      console.log('End timer sound failed:', e);
    }
  };
  
  const showNotification = () => {
    if ('Notification' in window && Notification.permission === 'granted') {
      new Notification('Pomodoro –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ', {
        body: '–í—Ä–µ–º—è —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ –∏ —Ä–∞–∑–º—è—Ç—å—Å—è',
        icon: 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%2310b981"><path d="M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z"/></svg>'
      });
    }
  };
  
  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  useEffect(() => {
    if ('Notification' in window && Notification.permission === 'default') {
      Notification.requestPermission();
    }
  }, []);
  
  // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const totalSeconds = totalMinutes * 60;
  const remainingSeconds = minutes * 60 + seconds;
  const progress = ((totalSeconds - remainingSeconds) / totalSeconds) * 100;
  
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-indigo-600 to-blue-700 p-4 md:p-8">
      {/* –ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã */}
      <audio
        ref={audioRef}
        loop
        preload="none"
        src={
          ambientSound === 'forest'
            ? 'Forest.mp3'
            : ambientSound === 'forest2'
            ? 'Forest_2.mp3'
            : ambientSound === 'ocean'
            ? 'Ocean.mp3'
            : ambientSound === 'construction'
            ? 'construction_site.mp3'
            : ''
        }
      />
      
      <div className="max-w-7xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <header className="text-center mb-8 slide-in">
          <div className="inline-flex items-center gap-3 bg-white/10 backdrop-blur-md rounded-full px-6 py-3">
            <img src="Coloured HH¬†Small.png" alt="–ö–∞—Å–∫–∞" className="w-12 h-12 object-contain" />
            <h1 className="text-3xl md:text-4xl font-bold text-white">Safety Pomodoro</h1>
            <i className="fas fa-shield-alt text-3xl text-green-400"></i>
          </div>
          <p className="text-white/80 mt-3 text-lg">–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –∑–∞–±–æ—Ç–æ–π –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</p>
        </header>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –¢–∞–π–º–µ—Ä */}
          <div className="lg:col-span-2 space-y-6">
            {/* –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ —Ç–∞–π–º–µ—Ä–∞ */}
            <div className="glass rounded-3xl p-8 shadow-2xl slide-in">
              <div className="hazard-stripe h-3 rounded-full mb-6"></div>
              
              {/* –î–∏—Å–ø–ª–µ–π —Ç–∞–π–º–µ—Ä–∞ */}
              <div className="text-center mb-8">
                <div className="relative inline-block">
                  <svg className="progress-ring" width="280" height="280">
                    <defs>
                      <linearGradient id="progress-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" stopColor="#10b981" />
                        <stop offset="100%" stopColor="#3b82f6" />
                      </linearGradient>
                    </defs>
                    <circle
                      cx="140"
                      cy="140"
                      r="130"
                      stroke="#e5e7eb"
                      strokeWidth="12"
                      fill="none"
                    />
                    <circle
                      className="progress-ring__circle"
                      cx="140"
                      cy="140"
                      r="130"
                      stroke="url(#progress-gradient)"
                      strokeWidth="12"
                      fill="none"
                      strokeLinecap="round"
                      strokeDasharray={`${2 * Math.PI * 130}`}
                      strokeDashoffset={`${2 * Math.PI * 130 * (1 - progress / 100)}`}
                    />
                  </svg>
                  <div className="absolute inset-0 flex flex-col items-center justify-center">
                    <div className="text-6xl md:text-7xl font-bold text-gray-800 tabular-nums">
                      {String(minutes).padStart(2, '0')}:{String(seconds).padStart(2, '0')}
                    </div>
                    <div className="text-gray-500 mt-2">
                      {isRunning ? '–í —Ä–∞–±–æ—Ç–µ' : '–ù–∞ –ø–∞—É–∑–µ'}
                    </div>
                  </div>
                </div>
              </div>
              
              {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
              <div className="flex justify-center gap-4 mb-6">
                <button
                  onClick={handleStart}
                  className={`px-8 py-4 rounded-2xl font-semibold text-lg transition-all transform hover:scale-105 ${
                    isRunning 
                      ? 'bg-orange-500 hover:bg-orange-600 text-white shadow-lg' 
                      : 'bg-green-500 hover:bg-green-600 text-white shadow-lg'
                  }`}
                >
                  <i className={`fas ${isRunning ? 'fa-pause' : 'fa-play'} mr-2`}></i>
                  {isRunning ? '–ü–∞—É–∑–∞' : '–°—Ç–∞—Ä—Ç'}
                </button>
                <button
                  onClick={handleReset}
                  className="px-8 py-4 rounded-2xl font-semibold text-lg neo-button transition-all transform hover:scale-105"
                >
                  <i className="fas fa-redo mr-2"></i>
                  –°–±—Ä–æ—Å
                </button>
              </div>
              
              {/* –ü—Ä–µ—Å–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-6">
                {[20, 25, 30, 40].map(preset => (
                  <button
                    key={preset}
                    onClick={() => handlePreset(preset)}
                    className={`py-3 rounded-xl font-medium transition-all ${
                      totalMinutes === preset 
                        ? 'bg-blue-500 text-white shadow-md' 
                        : 'bg-white/80 hover:bg-white text-gray-700 shadow'
                    }`}
                  >
                    <i className="fas fa-clock mr-2"></i>
                    {preset} –º–∏–Ω
                  </button>
                ))}
              </div>
              
              {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ */}
              <div className="bg-gray-100 rounded-2xl p-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è: {totalMinutes} –º–∏–Ω—É—Ç
                </label>
                <input
                  type="range"
                  min="1"
                  max="60"
                  value={totalMinutes}
                  onChange={(e) => handleDialChange(parseInt(e.target.value))}
                  className="w-full h-3 bg-gray-300 rounded-lg appearance-none cursor-pointer"
                  style={{
                    background: `linear-gradient(to right, #3b82f6 0%, #3b82f6 ${(totalMinutes/60)*100}%, #e5e7eb ${(totalMinutes/60)*100}%, #e5e7eb 100%)`
                  }}
                />
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                  <span>1</span>
                  <span>15</span>
                  <span>30</span>
                  <span>45</span>
                  <span>60</span>
                </div>
              </div>
            </div>
            
            {/* –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º */}
            <div className="glass rounded-2xl p-6 shadow-xl slide-in">
              <h3 className="text-lg font-semibold text-gray-800 mb-4">
                <i className="fas fa-music mr-2 text-purple-500"></i>
                –§–æ–Ω–æ–≤—ã–µ –∑–≤—É–∫–∏
              </h3>
              <div className="grid grid-cols-2 md:grid-cols-5 gap-3 mb-4">
                <button
                  onClick={() => setAmbientSound('none')}
                  className={`py-3 px-4 rounded-xl transition-all ${
                    ambientSound === 'none' 
                      ? 'bg-gray-500 text-white' 
                      : 'bg-white hover:bg-gray-50 text-gray-700 shadow'
                  }`}
                >
                  <i className="fas fa-volume-mute mr-2"></i>
                  –¢–∏—à–∏–Ω–∞
                </button>
                <button
                  onClick={() => setAmbientSound('forest')}
                  className={`py-3 px-4 rounded-xl transition-all ${
                    ambientSound === 'forest' 
                      ? 'bg-green-500 text-white' 
                      : 'bg-white hover:bg-gray-50 text-gray-700 shadow'
                  }`}
                >
                  <i className="fas fa-tree mr-2"></i>
                  –õ–µ—Å
                </button>
                <button
                  onClick={() => setAmbientSound('forest2')}
                  className={`py-3 px-4 rounded-xl transition-all ${
                    ambientSound === 'forest2' 
                      ? 'bg-green-600 text-white' 
                      : 'bg-white hover:bg-gray-50 text-gray-700 shadow'
                  }`}
                >
                  <i className="fas fa-leaf mr-2"></i>
                  –õ–µ—Å 2
                </button>
                <button
                  onClick={() => setAmbientSound('ocean')}
                  className={`py-3 px-4 rounded-xl transition-all ${
                    ambientSound === 'ocean' 
                      ? 'bg-blue-500 text-white' 
                      : 'bg-white hover:bg-gray-50 text-gray-700 shadow'
                  }`}
                >
                  <i className="fas fa-water mr-2"></i>
                  –û–∫–µ–∞–Ω
                </button>
                <button
                  onClick={() => setAmbientSound('construction')}
                  className={`py-3 px-4 rounded-xl transition-all ${
                    ambientSound === 'construction' 
                      ? 'bg-orange-500 text-white' 
                      : 'bg-white hover:bg-gray-50 text-gray-700 shadow'
                  }`}
                >
                  <i className="fas fa-hammer mr-2"></i>
                  –°—Ç—Ä–æ–π–∫–∞
                </button>
              </div>
              <div className="flex items-center gap-3">
                <i className="fas fa-volume-down text-gray-500"></i>
                <input
                  type="range"
                  min="0"
                  max="1"
                  step="0.1"
                  value={volume}
                  onChange={(e) => setVolume(parseFloat(e.target.value))}
                  className="flex-1 h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer"
                />
                <i className="fas fa-volume-up text-gray-500"></i>
              </div>
            </div>
          </div>
          
          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –°–æ–≤–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="space-y-6">
            {/* –°–æ–≤–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
            <div className="glass rounded-2xl p-6 shadow-xl slide-in">
              <div className="flex items-center gap-2 mb-4">
                <div className="w-10 h-10 bg-yellow-400 rounded-full flex items-center justify-center safety-pulse">
                  <i className="fas fa-exclamation-triangle text-gray-800"></i>
                </div>
                <h3 className="text-lg font-semibold text-gray-800">–°–æ–≤–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h3>
              </div>
              <div className="bg-gradient-to-r from-yellow-50 to-orange-50 rounded-xl p-4 border-l-4 border-yellow-400">
                <p className="text-gray-700 leading-relaxed">{currentTip}</p>
              </div>
              <button
                onClick={() => setCurrentTip(safetyTips[Math.floor(Math.random() * safetyTips.length)])}
                className="mt-4 w-full py-2 bg-yellow-400 hover:bg-yellow-500 text-gray-800 font-medium rounded-xl transition-all"
              >
                <i className="fas fa-sync-alt mr-2"></i>
                –ù–æ–≤—ã–π —Å–æ–≤–µ—Ç
              </button>
            </div>
            
            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="glass rounded-2xl p-6 shadow-xl slide-in">
              <h3 className="text-lg font-semibold text-gray-800 mb-4">
                <i className="fas fa-chart-line mr-2 text-blue-500"></i>
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è
              </h3>
              <div className="space-y-4">
                <div className="flex justify-between items-center p-3 bg-blue-50 rounded-xl">
                  <span className="text-gray-600">
                    <i className="fas fa-fire mr-2 text-orange-500"></i>
                    –°–µ—Ä–∏—è
                  </span>
                  <span className="text-2xl font-bold text-blue-600">{streak}</span>
                </div>
                <div className="flex justify-between items-center p-3 bg-green-50 rounded-xl">
                  <span className="text-gray-600">
                    <i className="fas fa-check-circle mr-2 text-green-500"></i>
                    –°–µ—Å—Å–∏–π
                  </span>
                  <span className="text-2xl font-bold text-green-600">{sessionCount}</span>
                </div>
                <div className="flex justify-between items-center p-3 bg-purple-50 rounded-xl">
                  <span className="text-gray-600">
                    <i className="fas fa-clock mr-2 text-purple-500"></i>
                    –ú–∏–Ω—É—Ç
                  </span>
                  <span className="text-2xl font-bold text-purple-600">{todayMinutes}</span>
                </div>
                <div className="flex justify-between items-center p-3 bg-yellow-50 rounded-xl">
                  <span className="text-gray-600">
                    <i className="fas fa-check-double mr-2 text-yellow-500"></i>
                    –ó–∞–¥–∞—á
                  </span>
                  <span className="text-2xl font-bold text-yellow-600">{completedTasks}</span>
                </div>
              </div>
            </div>
            
            {/* –ó–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å */}
            <div className="glass rounded-2xl p-6 shadow-xl slide-in">
              <h3 className="text-lg font-semibold text-gray-800 mb-4">
                <i className="fas fa-sticky-note mr-2 text-indigo-500"></i>
                –ó–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å
              </h3>
              <QuickNotes onTaskToggle={(completedCount) => setCompletedTasks(completedCount)} />
            </div>
            
          </div>
        </div>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–¥–∞—á –Ω–∞ –¥–µ–Ω—å
function QuickNotes({ onTaskToggle }) {
  const [notes, setNotes] = useState(() => {
    const saved = localStorage.getItem('pomodoroNotes');
    return saved ? JSON.parse(saved) : [];
  });
  const [newNote, setNewNote] = useState('');
  
  useEffect(() => {
    localStorage.setItem('pomodoroNotes', JSON.stringify(notes));
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    const completedCount = notes.filter(note => note.completed).length;
    onTaskToggle(completedCount);
  }, [notes, onTaskToggle]);
  
  const addNote = () => {
    if (newNote.trim()) {
      setNotes([...notes, { id: Date.now(), text: newNote, completed: false }]);
      setNewNote('');
    }
  };
  
  const toggleNote = (id) => {
    setNotes(notes.map(note => 
      note.id === id ? { ...note, completed: !note.completed } : note
    ));
  };
  
  const deleteNote = (id) => {
    setNotes(notes.filter(note => note.id !== id));
  };
  
  return (
    <div>
      <div className="flex gap-2 mb-3">
        <input
          type="text"
          value={newNote}
          onChange={(e) => setNewNote(e.target.value)}
          onKeyDown={(e) => e.key === 'Enter' && addNote()}
          placeholder="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É..."
          className="flex-1 px-3 py-2 rounded-xl border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <button
          onClick={addNote}
          className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-xl transition-all"
        >
          <i className="fas fa-plus"></i>
        </button>
      </div>
      <div className="space-y-2 max-h-48 overflow-y-auto">
        {notes.map(note => (
          <div key={note.id} className="flex items-center gap-2 p-2 bg-gray-50 rounded-lg">
            <input
              type="checkbox"
              checked={note.completed}
              onChange={() => toggleNote(note.id)}
              className="w-4 h-4 text-blue-600"
            />
            <span className={`flex-1 text-sm ${note.completed ? 'line-through text-gray-400' : 'text-gray-700'}`}>
              {note.text}
            </span>
            <button
              onClick={() => deleteNote(note.id)}
              className="text-red-500 hover:text-red-700 text-sm"
            >
              <i className="fas fa-trash"></i>
            </button>
          </div>
        ))}
      </div>
    </div>
  );
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (React 18 —Å –æ—Ç–∫–∞—Ç–æ–º)
const container = document.getElementById('root');
if (ReactDOM.createRoot) {
  const root = ReactDOM.createRoot(container);
  root.render(<App />);
} else {
  ReactDOM.render(<App />, container);
}
